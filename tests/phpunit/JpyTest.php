<?php
namespace Akky\Money;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-16 at 15:30:58.
 */
class JpyTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Jpy
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Jpy;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert ("abcde") == "abcde".
     *
     * @covers Jpy::apply
     */
    public function testApply()
    {
        $this->assertEquals(
            "abcde"
,
            $this->object->apply("abcde")
        );
    }

    /**
     * Generated from @assert ("1 million yen") == '1 million yen(1000000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply2()
    {
        $this->assertEquals(
            '1 million yen(1000000)'
,
            $this->object->apply("1 million yen")
        );
    }

    /**
     * Generated from @assert ("23.4 billion Yen") == '23.4 billion Yen(23400000000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply3()
    {
        $this->assertEquals(
            '23.4 billion Yen(23400000000)'
,
            $this->object->apply("23.4 billion Yen")
        );
    }

    /**
     * Generated from @assert ("1 yen") == '1 yen(1)'.
     *
     * @covers Jpy::apply
     */
    public function testApply4()
    {
        $this->assertEquals(
            '1 yen(1)'
,
            $this->object->apply("1 yen")
        );
    }

    /**
     * Generated from @assert ("\\15973280") == '\\15973280(15973280)'.
     *
     * @covers Jpy::apply
     */
    public function testApply5()
    {
        $this->assertEquals(
            '\\15973280(15973280)'
,
            $this->object->apply("\\15973280")
        );
    }

    /**
     * Generated from @assert ("3194万6560円") == '3194万6560円(31946560)'.
     *
     * @covers Jpy::apply
     */
    public function testApply6()
    {
        $this->assertEquals(
            '3194万6560円(31946560)'
,
            $this->object->apply("3194万6560円")
        );
    }

    /**
     * Generated from @assert ("15920円") == '15920円(15920)'.
     *
     * @covers Jpy::apply
     */
    public function testApply7()
    {
        $this->assertEquals(
            '15920円(15920)'
,
            $this->object->apply("15920円")
        );
    }

    /**
     * Generated from @assert ("半円") == '半円'.
     *
     * @covers Jpy::apply
     */
    public function testApply8()
    {
        $this->assertEquals(
            '半円'
,
            $this->object->apply("半円")
        );
    }

    /**
     * Generated from @assert ("円ドル") == '円ドル'.
     *
     * @covers Jpy::apply
     */
    public function testApply9()
    {
        $this->assertEquals(
            '円ドル'
,
            $this->object->apply("円ドル")
        );
    }

    /**
     * Generated from @assert ("559円") == '559円(559)'.
     *
     * @covers Jpy::apply
     */
    public function testApply10()
    {
        $this->assertEquals(
            '559円(559)'
,
            $this->object->apply("559円")
        );
    }

    /**
     * Generated from @assert ("3万1920円") == '3万1920円(31920)'.
     *
     * @covers Jpy::apply
     */
    public function testApply11()
    {
        $this->assertEquals(
            '3万1920円(31920)'
,
            $this->object->apply("3万1920円")
        );
    }

    /**
     * Generated from @assert ("3059万2000円") == '3059万2000円(30592000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply12()
    {
        $this->assertEquals(
            '3059万2000円(30592000)'
,
            $this->object->apply("3059万2000円")
        );
    }

    /**
     * Generated from @assert ("３０５９万２０００円") == '3059万2000円(30592000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply13()
    {
        $this->assertEquals(
            '3059万2000円(30592000)'
,
            $this->object->apply("３０５９万２０００円")
        );
    }

    /**
     * Generated from @assert ("5兆9840億48万円") == '5兆9840億48万円(5984000480000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply14()
    {
        $this->assertEquals(
            '5兆9840億48万円(5984000480000)'
,
            $this->object->apply("5兆9840億48万円")
        );
    }

    /**
     * Generated from @assert ("987億6543万1200円") == '987億6543万1200円(98765431200)'.
     *
     * @covers Jpy::apply
     */
    public function testApply15()
    {
        $this->assertEquals(
            '987億6543万1200円(98765431200)'
,
            $this->object->apply("987億6543万1200円")
        );
    }

    /**
     * Generated from @assert ("548億円") == '548億円(54800000000)'.
     *
     * @covers Jpy::apply
     */
    public function testApply16()
    {
        $this->assertEquals(
            '548億円(54800000000)'
,
            $this->object->apply("548億円")
        );
    }

    /**
     * Generated from @assert ("この272万円を支払うには") == 'この272万円(2720000)を支払うには'.
     *
     * @covers Jpy::apply
     */
    public function testApply17()
    {
        $this->assertEquals(
            'この272万円(2720000)を支払うには'
,
            $this->object->apply("この272万円を支払うには")
        );
    }

    /**
     * Generated from @assert ("経済効果が、最大で約6400億円になると分析した") == '経済効果が、最大で約6400億円(640000000000)になると分析した'.
     *
     * @covers Jpy::apply
     */
    public function testApply18()
    {
        $this->assertEquals(
            '経済効果が、最大で約6400億円(640000000000)になると分析した'
,
            $this->object->apply("経済効果が、最大で約6400億円になると分析した")
        );
    }

    /**
     * Generated from @assert ("この272万円($34,000)を支払うには") == 'この272万円(2720000)($34,000)を支払うには'.
     *
     * @covers Jpy::apply
     */
    public function testApply19()
    {
        $this->assertEquals(
            'この272万円(2720000)($34,000)を支払うには'
,
            $this->object->apply("この272万円($34,000)を支払うには")
        );
    }

    /**
     * @covers Jpy::apply
     */
    public function testApply20()
    {
        $this->assertEquals(
            'では、\2000(2000) ではどうだろう'
,
            $this->object->apply('では、\2000 ではどうだろう')
        );
    }

    /**
     * Generated from @assert (array("yen1"=>"12,345")) == "12345".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize()
    {
        $this->assertEquals(
            "12345"
,
            $this->object->normalize(array("yen1"=>"12,345"))
        );
    }

    /**
     * Generated from @assert (array("trillion"=>"3")) == "3000000000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize2()
    {
        $this->assertEquals(
            "3000000000000"
,
            $this->object->normalize(array("trillion"=>"3"))
        );
    }

    /**
     * Generated from @assert (array("billion"=>"1","million"=>30,"yen2"=>600)) == "1030000600".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize3()
    {
        $this->assertEquals(
            "1030000600"
,
            $this->object->normalize(array("billion"=>"1","million"=>30,"yen2"=>600))
        );
    }

    /**
     * Generated from @assert (array("million"=>1)) == "1000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize4()
    {
        $this->assertEquals(
            "1000000"
,
            $this->object->normalize(array("million"=>1))
        );
    }

    /**
     * Generated from @assert (array("thousand"=>12,"yen2"=>500)) == "12500".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize5()
    {
        $this->assertEquals(
            "12500"
,
            $this->object->normalize(array("thousand"=>12,"yen2"=>500))
        );
    }

    /**
     * Generated from @assert (array("chou"=>"","oku"=>48,"man"=>6000)) == "4860000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize6()
    {
        $this->assertEquals(
            "4860000000"
,
            $this->object->normalize(array("chou"=>"","oku"=>48,"man"=>6000))
        );
    }

    /**
     * Generated from @assert (array("chou"=>1,"oku"=>2,"man"=>3,"yen3"=>4)) == "1000200030004".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize7()
    {
        $this->assertEquals(
            "1000200030004"
,
            $this->object->normalize(array("chou"=>1,"oku"=>2,"man"=>3,"yen3"=>4))
        );
    }

    /**
     * Generated from @assert (array("chou"=>12,"oku"=>3000)) == "12300000000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize8()
    {
        $this->assertEquals(
            "12300000000000"
,
            $this->object->normalize(array("chou"=>12,"oku"=>3000))
        );
    }

    /**
     * Generated from @assert (array("chou"=>12,"man"=>500)) == "12000005000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize9()
    {
        $this->assertEquals(
            "12000005000000"
,
            $this->object->normalize(array("chou"=>12,"man"=>500))
        );
    }

    /**
     * Generated from @assert (array("yen3"=>"6.99")) == "6.99".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize10()
    {
        $this->assertEquals(
            "6"
,
            $this->object->normalize(array("yen3"=>"6.99"))
        );
    }

    /**
     * Generated from @assert (array("man"=>2.7)) == "27000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize11()
    {
        $this->assertEquals(
            "27000"
,
            $this->object->normalize(array("man"=>2.7))
        );
    }

    /**
     * Generated from @assert (array("oku"=>168)) == "16800000000".
     *
     * @covers Jpy::normalize
     */
    public function testNormalize12()
    {
        $this->assertEquals(
            "16800000000"
,
            $this->object->normalize(array("oku"=>168))
        );
    }
}
